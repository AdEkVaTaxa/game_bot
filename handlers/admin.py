from typing import Union
from asyncio import sleep, create_task

from aiogram import Router, Bot
from aiogram import types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.fsm.context import FSMContext

from .util.minor_func import main_menu, broadcast, admin_panel
from .state import Admin
from .util.keyboard import inline_keyboard
from redis import get_redis_data, add_redis_data
from models.user import get_user_tg_id, get_user_balance
from models.balance import all_withdrawals, withdrawals_id, get_bet_amount
from database import get_db

router = Router()


@router.callback_query(state=Admin.admin_panel)
async def admin_action(callback: types.CallbackQuery, state: FSMContext):
	if callback.data == "base_menu":
		await state.clear()
		await main_menu(callback.message, state, True)

	elif callback.data == "broadcast":
		text = "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤)"
		await state.set_state(Admin.broadcast)

		await callback.message.edit_text(text)

	elif callback.data == "user_blocking":
		text = "–î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ Telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
		await state.set_state(Admin.user_block)

		await callback.message.edit_text(text)

	elif callback.data == "withdrawal":
		withdrawals = await all_withdrawals()
		await state.set_state(Admin.withdrawal_list)

		for entry in withdrawals:
			text = f"–ú–æ–Ω–µ—Ç–∞: {entry.coin}\n \n–ê–¥—Ä–µ—Å—Å:\n{entry.adress_data}\n \n–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {entry.amount} üíé\n \n–í—ã–≤–æ–¥ —Å {'–†–µ—Ñ–µ—Ä–∞–ª–∫–∏' if entry.referal_balance else '–ë–∞–ª–∞–Ω—Å–∞'}"
			buttons = inline_keyboard({"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å": f'{entry.id}__confirm', "–£–¥–∞–ª–∏—Ç—å": f'{entry.id}__delete', "< –ù–∞–∑–∞–¥": "base_menu"}, "", 1)
			await callback.message.answer(text, reply_markup=buttons)


@router.message(lambda message: len(message.text) > 2, state=Admin.broadcast)
async def broadcast_message(message: types.Message, bot: Bot, state: FSMContext):
	create_task(broadcast(message.text, bot,))
	
	await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω")
	await state.clear()
	await admin_panel(message, state, False)


@router.message(state=Admin.user_block)
async def user_block(message: types.Message, state: FSMContext):
	user = await get_user_tg_id(str(message.text))
	text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram id –Ω–µ –Ω–∞–π–¥–µ–Ω"

	if user is not None:
		user.freeze = True
		user.update()
		text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"

	await message.answer(text)
	await state.clear()
	await admin_panel(message, state, False)


@router.callback_query(state=Admin.withdrawal_list)
async def withdrawal_list(callback: types.CallbackQuery, state: FSMContext):
	if callback.data == "base_menu":
		await state.clear()
		await main_menu(callback.message, state, True)

	else:
		db = get_db()
		entry_id, status = int(callback.data.split("__")[0]), callback.data.split("__")[1]
		withdrawals = await withdrawals_id(entry_id, db)
		user_tg_id = withdrawals.user_tg_id

		if status == "delete":
			if withdrawals.referal_balance:
				bet = await get_bet_amount(withdrawals.user_id, db)
				bet.bet_amount += withdrawals.amount
				bet.update(db)

			else:
				user_balance = await get_user_balance(user_tg_id, db=db)
				user_balance[1].balance += withdrawals.amount
				user_balance[1].update(db)
				await add_redis_data(f"{user_tg_id}__balance", {"balance": user_balance[1].balance, "demo_balance": user_balance[0].balance})


		db.delete(withdrawals)
		db.commit()
		db.close()
		
		await callback.message.delete()
